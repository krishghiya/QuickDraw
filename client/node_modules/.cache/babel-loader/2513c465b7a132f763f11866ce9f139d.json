{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Checkout\\\\Documents\\\\Projects\\\\QuickDraw\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport CanvasDraw from 'react-canvas-draw';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultList = [{\n  name: 'No prediction',\n  confidence: '100'\n}];\n\nfunction App() {\n  _s();\n\n  async function sendData(data) {\n    const res = await axios.post('http://localhost:8000/data/', {\n      lines: data\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => setList(res['data']));\n    return res;\n  }\n\n  const [color, setColor] = useState('black');\n  const [saveableCanvas, setsaveableCanvas] = useState(null);\n  const [list, setList] = useState(defaultList);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Quick Draw!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n      className: \"canvas\",\n      ref: canvasDraw => setsaveableCanvas(canvasDraw),\n      onChange: () => setColor(\"#\" + Math.floor(Math.random() * 16777215).toString(16)),\n      brushColor: color,\n      hideGrid: true,\n      brushRadius: 2,\n      lazyRadius: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"results\",\n      children: list.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Resembles \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: item.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 28\n          }, this), \" with confidence: \", item.confidence, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this)\n      }, item.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => sendData(saveableCanvas.getSaveData()),\n        children: \"Predict Doodle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveableCanvas.clear(),\n        children: \"Clear Screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"am64vAyDwvOPxjfj7ZaIOjitknI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Checkout/Documents/Projects/QuickDraw/client/src/App.js"],"names":["CanvasDraw","useState","axios","defaultList","name","confidence","App","sendData","data","res","post","lines","headers","then","setList","color","setColor","saveableCanvas","setsaveableCanvas","list","canvasDraw","Math","floor","random","toString","map","item","getSaveData","clear"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,mBAAvB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,UAAU,EAAE;AAFd,CADkB,CAApB;;AAMA,SAASC,GAAT,GAAe;AAAA;;AAEb,iBAAeC,QAAf,CAAwBC,IAAxB,EAA8B;AAC5B,UAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,IAAN,CAAW,6BAAX,EAA0C;AAC1DC,MAAAA,KAAK,EAAEH;AADmD,KAA1C,EAEf;AACDI,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADR,KAFe,EAMfC,IANe,CAMVJ,GAAG,IAAIK,OAAO,CAACL,GAAG,CAAC,MAAD,CAAJ,CANJ,CAAlB;AAOA,WAAOA,GAAP;AACD;;AAED,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM,CAACgB,cAAD,EAAiBC,iBAAjB,IAAsCjB,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACkB,IAAD,EAAOL,OAAP,IAAkBb,QAAQ,CAACE,WAAD,CAAhC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAIM,QAAC,UAAD;AACE,MAAA,SAAS,EAAC,QADZ;AAEE,MAAA,GAAG,EAAEiB,UAAU,IAAIF,iBAAiB,CAACE,UAAD,CAFtC;AAGE,MAAA,QAAQ,EAAE,MAAMJ,QAAQ,CAAC,MAAMK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,QAA3B,EAAqCC,QAArC,CAA8C,EAA9C,CAAP,CAH1B;AAIE,MAAA,UAAU,EAAET,KAJd;AAKE,MAAA,QAAQ,EAAE,IALZ;AAME,MAAA,WAAW,EAAE,CANf;AAOE,MAAA,UAAU,EAAE;AAPd;AAAA;AAAA;AAAA;AAAA,YAJN,eAaM;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA,gBACGI,IAAI,CAACM,GAAL,CAAUC,IAAD,iBACV;AAAA,+BACE;AAAA,gDAAa;AAAA,sBAAIA,IAAI,CAACtB;AAAT;AAAA;AAAA;AAAA;AAAA,kBAAb,wBAAkDsB,IAAI,CAACrB,UAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAASqB,IAAI,CAACtB,IAAd;AAAA;AAAA;AAAA;AAAA,cADC;AADH;AAAA;AAAA;AAAA;AAAA,YAbN,eAoBI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE,MAAMG,QAAQ,CAACU,cAAc,CAACU,WAAf,EAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAQ,QAAA,OAAO,EAAE,MAAMV,cAAc,CAACW,KAAf,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YApBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD;;GAjDQtB,G;;KAAAA,G;AAmDT,eAAeA,GAAf","sourcesContent":["import CanvasDraw from 'react-canvas-draw'\r\nimport {useState} from 'react'\r\nimport axios from 'axios'\r\n\r\nconst defaultList = [\r\n  {\r\n    name: 'No prediction', \r\n    confidence: '100',\r\n  }]\r\n\r\nfunction App() {\r\n\r\n  async function sendData(data) {\r\n    const res = await axios.post('http://localhost:8000/data/', {\r\n      lines: data\r\n    }, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }).then(res => setList(res['data']))\r\n    return res;\r\n  }\r\n\r\n  const [color, setColor] = useState('black')\r\n  const [saveableCanvas, setsaveableCanvas] = useState(null)\r\n  const [list, setList] = useState(defaultList)\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n        <h1>\r\n          Welcome to Quick Draw!\r\n        </h1>\r\n          <CanvasDraw \r\n            className='canvas'\r\n            ref={canvasDraw => setsaveableCanvas(canvasDraw)}\r\n            onChange={() => setColor(\"#\" + Math.floor(Math.random() * 16777215).toString(16))}\r\n            brushColor={color}\r\n            hideGrid={true}\r\n            brushRadius={2}\r\n            lazyRadius={0}\r\n          />\r\n          <ol className='results'>\r\n            {list.map((item) => (\r\n            <li key={item.name}>\r\n              <p>Resembles <b>{item.name}</b> with confidence: {item.confidence}%</p>\r\n            </li>\r\n            ))}\r\n          </ol>\r\n        <div className='button'>\r\n          <button onClick={() => sendData(saveableCanvas.getSaveData())}>\r\n            Predict Doodle\r\n          </button>\r\n          <button onClick={() => saveableCanvas.clear()}>\r\n            Clear Screen\r\n          </button>\r\n        </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}