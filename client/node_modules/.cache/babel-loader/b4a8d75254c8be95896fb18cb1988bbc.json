{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Checkout\\\\Documents\\\\Projects\\\\QuickDraw\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport CanvasDraw from 'react-canvas-draw';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultList = [{\n  name: 'No prediction',\n  confidence: '100'\n}];\n\nfunction App() {\n  _s();\n\n  async function sendData(data) {\n    try {\n      const res = await axios.post('http://localhost:8000/data/', {\n        lines: data\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => setList(res['data']));\n      return res;\n    } catch (error) {\n      setList(defaultList);\n    }\n  }\n\n  const [color, setColor] = useState('black');\n  const [saveableCanvas, setsaveableCanvas] = useState(null);\n  const [list, setList] = useState(defaultList);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Quick Draw!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n      className: \"canvas\",\n      ref: canvasDraw => setsaveableCanvas(canvasDraw),\n      onChange: () => {\n        setColor(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\n        sendData(saveableCanvas.getSaveData());\n      },\n      brushColor: color,\n      hideGrid: true,\n      brushRadius: 2,\n      lazyRadius: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"results\",\n      children: list.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Resembles\", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: [\" \", item.name.charAt(0).toUpperCase() + item.name.slice(1), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), \"with confidence: \", item.confidence, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this)\n      }, item.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: () => {\n        saveableCanvas.clear();\n        setList(defaultList);\n      },\n      children: \"Clear Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"am64vAyDwvOPxjfj7ZaIOjitknI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Checkout/Documents/Projects/QuickDraw/client/src/App.js"],"names":["CanvasDraw","useState","axios","defaultList","name","confidence","App","sendData","data","res","post","lines","headers","then","setList","error","color","setColor","saveableCanvas","setsaveableCanvas","list","canvasDraw","Math","floor","random","toString","getSaveData","map","item","charAt","toUpperCase","slice","clear"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,mBAAvB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,UAAU,EAAE;AAFd,CADkB,CAApB;;AAMA,SAASC,GAAT,GAAe;AAAA;;AAEb,iBAAeC,QAAf,CAAwBC,IAAxB,EAA8B;AAC5B,QAAI;AACF,YAAMC,GAAG,GAAG,MAAMP,KAAK,CAACQ,IAAN,CAAW,6BAAX,EAA0C;AAC1DC,QAAAA,KAAK,EAAEH;AADmD,OAA1C,EAEb;AACDI,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADR,OAFa,EAMbC,IANa,CAMRJ,GAAG,IAAIK,OAAO,CAACL,GAAG,CAAC,MAAD,CAAJ,CANN,CAAlB;AAOA,aAAOA,GAAP;AACD,KATD,CASC,OAAOM,KAAP,EAAc;AACbD,MAAAA,OAAO,CAACX,WAAD,CAAP;AACD;AACF;;AAED,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM,CAACiB,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACmB,IAAD,EAAON,OAAP,IAAkBb,QAAQ,CAACE,WAAD,CAAhC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAIM,QAAC,UAAD;AACE,MAAA,SAAS,EAAC,QADZ;AAEE,MAAA,GAAG,EAAEkB,UAAU,IAAIF,iBAAiB,CAACE,UAAD,CAFtC;AAGE,MAAA,QAAQ,EAAE,MAAM;AACdJ,QAAAA,QAAQ,CAAC,MAAMK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,QAA3B,EAAqCC,QAArC,CAA8C,EAA9C,CAAP,CAAR;AACAlB,QAAAA,QAAQ,CAACW,cAAc,CAACQ,WAAf,EAAD,CAAR;AACD,OANH;AAOE,MAAA,UAAU,EAAEV,KAPd;AAQE,MAAA,QAAQ,EAAE,IARZ;AASE,MAAA,WAAW,EAAE,CATf;AAUE,MAAA,UAAU,EAAE;AAVd;AAAA;AAAA;AAAA;AAAA,YAJN,eAgBM;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA,gBACGI,IAAI,CAACO,GAAL,CAAUC,IAAD,iBACV;AAAA,+BACE;AAAA,+CACA;AAAA,4BAAKA,IAAI,CAACxB,IAAL,CAAUyB,MAAV,CAAiB,CAAjB,EAAoBC,WAApB,KAAoCF,IAAI,CAACxB,IAAL,CAAU2B,KAAV,CAAgB,CAAhB,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,uBAEmBH,IAAI,CAACvB,UAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,SAASuB,IAAI,CAACxB,IAAd;AAAA;AAAA;AAAA;AAAA,cADC;AADH;AAAA;AAAA;AAAA;AAAA,YAhBN,eAyBI;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,OAAO,EAAE,MAAM;AAACc,QAAAA,cAAc,CAACc,KAAf;AAAuBlB,QAAAA,OAAO,CAACX,WAAD,CAAP;AAAsB,OAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD;;GApDQG,G;;KAAAA,G;AAsDT,eAAeA,GAAf","sourcesContent":["import CanvasDraw from 'react-canvas-draw'\r\nimport {useState} from 'react'\r\nimport axios from 'axios'\r\n\r\nconst defaultList = [\r\n  {\r\n    name: 'No prediction', \r\n    confidence: '100',\r\n  }]\r\n\r\nfunction App() {\r\n\r\n  async function sendData(data) {\r\n    try {\r\n      const res = await axios.post('http://localhost:8000/data/', {\r\n        lines: data\r\n        }, {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        }).then(res => setList(res['data']))\r\n      return res;\r\n    }catch (error) {\r\n      setList(defaultList)  \r\n    }\r\n  }\r\n\r\n  const [color, setColor] = useState('black')\r\n  const [saveableCanvas, setsaveableCanvas] = useState(null)\r\n  const [list, setList] = useState(defaultList)\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n        <h1>\r\n          Welcome to Quick Draw!\r\n        </h1>\r\n          <CanvasDraw \r\n            className='canvas'\r\n            ref={canvasDraw => setsaveableCanvas(canvasDraw)}\r\n            onChange={() => {\r\n              setColor(\"#\" + Math.floor(Math.random() * 16777215).toString(16));\r\n              sendData(saveableCanvas.getSaveData());\r\n            }}\r\n            brushColor={color}\r\n            hideGrid={true}\r\n            brushRadius={2}\r\n            lazyRadius={0}\r\n          />\r\n          <ol className='results'>\r\n            {list.map((item) => (\r\n            <li key={item.name}>\r\n              <p>Resembles \r\n              <b> {item.name.charAt(0).toUpperCase() + item.name.slice(1)} </b>\r\n               with confidence: {item.confidence}%</p>\r\n            </li>\r\n            ))}\r\n          </ol>\r\n        <button className='button' onClick={() => {saveableCanvas.clear();setList(defaultList);}}>\r\n            Clear Screen\r\n        </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}