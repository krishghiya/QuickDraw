{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Checkout\\\\Documents\\\\Projects\\\\QuickDraw\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport CanvasDraw from 'react-canvas-draw';\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function sendData(data) {\n  const res = await axios.post('http://localhost:8000/data/', {\n    lines: data\n  }, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  return res['data'];\n}\n\nfunction App() {\n  _s();\n\n  function onChange(data) {\n    sendData(data).then(result => {\n      console.log(result);\n      setList(data);\n    });\n  }\n\n  const [color, setColor] = useState('black');\n  const [saveableCanvas, setsaveableCanvas] = useState(null);\n  const [list, setList] = useState([{\n    name: 'No prediction',\n    confidence: '0'\n  }]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Quick Draw!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details\",\n      children: [/*#__PURE__*/_jsxDEV(CanvasDraw, {\n        className: \"canvas\",\n        ref: canvasDraw => setsaveableCanvas(canvasDraw),\n        onChange: () => setColor(\"#\" + Math.floor(Math.random() * 16777215).toString(16)),\n        brushColor: color,\n        hideGrid: true,\n        brushRadius: 2,\n        lazyRadius: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        style: {\n          color: 'white'\n        },\n        children: list.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: item.name\n        }, item.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onChange(saveableCanvas.getSaveData()),\n        children: \"Predict Doodle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => saveableCanvas.clear(),\n        children: \"Clear Screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"GnfHuCVc8OIcO8EX7kTM/lkKtDo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Checkout/Documents/Projects/QuickDraw/client/src/App.js"],"names":["CanvasDraw","useState","axios","sendData","data","res","post","lines","headers","App","onChange","then","result","console","log","setList","color","setColor","saveableCanvas","setsaveableCanvas","list","name","confidence","canvasDraw","Math","floor","random","toString","map","item","getSaveData","clear"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,mBAAvB;AACA,SAAQC,QAAR,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,eAAeC,QAAf,CAAwBC,IAAxB,EAA8B;AAC5B,QAAMC,GAAG,GAAG,MAAMH,KAAK,CAACI,IAAN,CAAW,6BAAX,EAA0C;AAC1DC,IAAAA,KAAK,EAAEH;AADmD,GAA1C,EAEf;AACDI,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADR,GAFe,CAAlB;AAOA,SAAOH,GAAG,CAAC,MAAD,CAAV;AACD;;AAED,SAASI,GAAT,GAAe;AAAA;;AAEf,WAASC,QAAT,CAAkBN,IAAlB,EAAwB;AACtBD,IAAAA,QAAQ,CAACC,IAAD,CAAR,CAAeO,IAAf,CAAoBC,MAAM,IAAI;AAACC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAAoBG,MAAAA,OAAO,CAACX,IAAD,CAAP;AAAc,KAAjE;AACD;;AAEC,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM,CAACiB,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACmB,IAAD,EAAOL,OAAP,IAAkBd,QAAQ,CAAC,CAC/B;AACEoB,IAAAA,IAAI,EAAE,eADR;AAEEC,IAAAA,UAAU,EAAE;AAFd,GAD+B,CAAD,CAAhC;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE,QAAC,UAAD;AACE,QAAA,SAAS,EAAC,QADZ;AAEE,QAAA,GAAG,EAAEC,UAAU,IAAIJ,iBAAiB,CAACI,UAAD,CAFtC;AAGE,QAAA,QAAQ,EAAE,MAAMN,QAAQ,CAAC,MAAMO,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,QAA3B,EAAqCC,QAArC,CAA8C,EAA9C,CAAP,CAH1B;AAIE,QAAA,UAAU,EAAEX,KAJd;AAKE,QAAA,QAAQ,EAAE,IALZ;AAME,QAAA,WAAW,EAAE,CANf;AAOE,QAAA,UAAU,EAAE;AAPd;AAAA;AAAA;AAAA;AAAA,cADF,eAUE;AAAI,QAAA,KAAK,EAAE;AAACA,UAAAA,KAAK,EAAE;AAAR,SAAX;AAAA,kBACGI,IAAI,CAACQ,GAAL,CAAUC,IAAD,iBACV;AAAA,oBACKA,IAAI,CAACR;AADV,WAASQ,IAAI,CAACR,IAAd;AAAA;AAAA;AAAA;AAAA,gBADC;AADH;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAsBI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE,MAAMX,QAAQ,CAACQ,cAAc,CAACY,WAAf,EAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAQ,QAAA,OAAO,EAAE,MAAMZ,cAAc,CAACa,KAAf,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAtBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD;;GAhDQtB,G;;KAAAA,G;AAkDT,eAAeA,GAAf","sourcesContent":["import CanvasDraw from 'react-canvas-draw'\r\nimport {useState} from 'react'\r\nimport axios from 'axios'\r\n\r\nasync function sendData(data) {\r\n  const res = await axios.post('http://localhost:8000/data/', {\r\n    lines: data\r\n  }, {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  })\r\n  return res['data'];\r\n}\r\n\r\nfunction App() {\r\n\r\nfunction onChange(data) {\r\n  sendData(data).then(result => {console.log(result);setList(data)});\r\n}\r\n\r\n  const [color, setColor] = useState('black')\r\n  const [saveableCanvas, setsaveableCanvas] = useState(null)\r\n  const [list, setList] = useState([\r\n    {\r\n      name: 'No prediction', \r\n      confidence: '0',\r\n    }])\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n        <h1>\r\n          Welcome to Quick Draw!\r\n        </h1>\r\n        <div className='details'>\r\n          <CanvasDraw \r\n            className='canvas'\r\n            ref={canvasDraw => setsaveableCanvas(canvasDraw)}\r\n            onChange={() => setColor(\"#\" + Math.floor(Math.random() * 16777215).toString(16))}\r\n            brushColor={color}\r\n            hideGrid={true}\r\n            brushRadius={2}\r\n            lazyRadius={0}\r\n          />\r\n          <ol style={{color: 'white'}}>\r\n            {list.map((item) => (\r\n            <li key={item.name}>\r\n                {item.name}\r\n            </li>\r\n            ))}\r\n          </ol>\r\n        </div>\r\n        <div className='button'>\r\n          <button onClick={() => onChange(saveableCanvas.getSaveData())}>\r\n            Predict Doodle\r\n          </button>\r\n          <button onClick={() => saveableCanvas.clear()}>\r\n            Clear Screen\r\n          </button>\r\n        </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}